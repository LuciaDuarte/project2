<div class="global-body-margin-top">


<h1>Find people who needs help around you</h1>

<div> row with content like filters, search bar.</div>

<div class="helper-map-page-bloc">
{{!--
  <div>
    Other members nearby:
    <div>
      {{#each needyNearby}}
      <div class="snippet-preview">
          <!-- <img class="preview-image" src="{{image}}"> -->
          <h5> {{username}}</h5>
          <p> Needs help for: {{username}}</p>  
          <a href="/n-profile/{{_id}}"> See more</a>
      </div>  
      {{/each}}
    </div>
  </div> --}}


<input type="hidden" id="userInput" value="{{user}}">
<input type="hidden" id="allMarkers" value="{{markers}}">
<div style="width:1000px" id="helperMap"></div>
</div>

</div>
     <script
      src="https://maps.googleapis.com/maps/api/js?key={{gmapKey}}&callback=initMap&libraries=&v=weekly"
      defer
    ></script>  
<script>
 
//Helper Map Initiation
let helperMap;
let geocoder;
//const infowindow = new google.maps.InfoWindow();
function initMap() {
  geocoder = new google.maps.Geocoder();
   let currentUser = JSON.parse(document.getElementById("userInput").value);
 //  const lisbon = { lat: 38.7117206, lng: -9.1264315 };

 //  const centralPoint = user.geocoding;
  helperMap = new google.maps.Map(document.getElementById('helperMap'), {
    zoom: 17,
    center: {lat: currentUser.geocoding.lat, lng: currentUser.geocoding.lng}
  })
}


function showMarkers() {  // markers are comming from route and it is an array
   let markers = JSON.parse(document.getElementById("allMarkers").value);

   // add some filters based on the radio buttons checked.
   debugger;
   markers.forEach((marker) =>{
     setMarker({ lat: marker.geocoding.lat, lng: marker.geocoding.lng})
    });
 };

function setMarker(marker) {
  new google.maps.Marker({
   position: marker,
    map: helperMap
  });
 };

  function getCurrentLocation() {
    navigator.geolocation.getCurrentPosition((position) =>{
      const pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      }
 //     console.log(pos, 'this is my position')
      helperMap = new google.maps.Map(document.getElementById('helperMap'), {
      zoom: 13,
      center: pos
     })
    })
  }


  function codeAddress() {
    var address = document.getElementById('address').value;
    geocoder.geocode( { 'address': address}, function(results, status) {
      if (status == 'OK') {
        map.setCenter(results[0].geometry.location);
        var marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
        });
      } else {
        alert('Geocode was not successful for the following reason: ' + status);
      }
    });
  }



//  function searchPlaces() {
//    const heden = {lat: 38.7117206, lng: -9.1264315};
//
//    let request = {
//      location: heden,
//      radius: '50',
//      type: ['Restaurants']
//    };
//    let service = new google.maps.places.PlacesService(map);
//    service.nearbySearch(request, (results, status) =>{
//      if (status === google.maps.places.PlacesServiceStatus.OK) {
//        for(let i = 0; i < results.length; i++) {
//          let lat = results[i].geometry.location.lat();
//          let lng = results[i].geometry.location.lng();
//          setMarker({lat, lng});
//        }
//      }
//    })
//  }
setTimeout(()=> {
  showMarkers();
},1000)

</script>

